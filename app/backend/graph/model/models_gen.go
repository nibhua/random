// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type DeletePayload struct {
	Ok bool `json:"ok"`
}

type File struct {
	ID                string    `json:"id"`
	Owner             *User     `json:"owner"`
	FilenameOriginal  string    `json:"filenameOriginal"`
	SizeBytesOriginal int       `json:"sizeBytesOriginal"`
	MimeDeclared      *string   `json:"mimeDeclared,omitempty"`
	MimeDetected      *string   `json:"mimeDetected,omitempty"`
	UploadedAt        time.Time `json:"uploadedAt"`
	DownloadCount     int       `json:"downloadCount"`
	Deduped           bool      `json:"deduped"`
	Tags              []string  `json:"tags"`
}

type FileBlobInfo struct {
	Sha256       string `json:"sha256"`
	SizeBytes    int    `json:"sizeBytes"`
	MimeDetected string `json:"mimeDetected"`
}

type FileConnection struct {
	Nodes      []*File `json:"nodes"`
	TotalCount int     `json:"totalCount"`
}

type FileFilter struct {
	Search       *string    `json:"search,omitempty"`
	Tags         []string   `json:"tags,omitempty"`
	MimeTypes    []string   `json:"mimeTypes,omitempty"`
	MinSize      *int       `json:"minSize,omitempty"`
	MaxSize      *int       `json:"maxSize,omitempty"`
	UploaderName *string    `json:"uploaderName,omitempty"`
	UploaderID   *string    `json:"uploaderId,omitempty"`
	UploadedFrom *time.Time `json:"uploadedFrom,omitempty"`
	UploadedTo   *time.Time `json:"uploadedTo,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type Share struct {
	ID         string          `json:"id"`
	File       *File           `json:"file"`
	Visibility ShareVisibility `json:"visibility"`
	Token      *string         `json:"token,omitempty"`
	ExpiresAt  *time.Time      `json:"expiresAt,omitempty"`
}

type ShareInput struct {
	FileID     string          `json:"fileId"`
	Visibility ShareVisibility `json:"visibility"`
	ExpiresAt  *time.Time      `json:"expiresAt,omitempty"`
}

type StorageStats struct {
	TotalUsageBytes    int     `json:"totalUsageBytes"`
	OriginalUsageBytes int     `json:"originalUsageBytes"`
	SavingsBytes       int     `json:"savingsBytes"`
	SavingsPercent     float64 `json:"savingsPercent"`
}

type UploadResult struct {
	Files []*File `json:"files"`
}

type User struct {
	ID         string    `json:"id"`
	Email      string    `json:"email"`
	Name       *string   `json:"name,omitempty"`
	Role       Role      `json:"role"`
	QuotaBytes int       `json:"quotaBytes"`
	CreatedAt  time.Time `json:"createdAt"`
}

type FileScope string

const (
	FileScopeOwn    FileScope = "OWN"
	FileScopePublic FileScope = "PUBLIC"
)

var AllFileScope = []FileScope{
	FileScopeOwn,
	FileScopePublic,
}

func (e FileScope) IsValid() bool {
	switch e {
	case FileScopeOwn, FileScopePublic:
		return true
	}
	return false
}

func (e FileScope) String() string {
	return string(e)
}

func (e *FileScope) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FileScope(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FileScope", str)
	}
	return nil
}

func (e FileScope) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleUser  Role = "USER"
	RoleAdmin Role = "ADMIN"
)

var AllRole = []Role{
	RoleUser,
	RoleAdmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUser, RoleAdmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ShareVisibility string

const (
	ShareVisibilityPrivate ShareVisibility = "PRIVATE"
	ShareVisibilityPublic  ShareVisibility = "PUBLIC"
)

var AllShareVisibility = []ShareVisibility{
	ShareVisibilityPrivate,
	ShareVisibilityPublic,
}

func (e ShareVisibility) IsValid() bool {
	switch e {
	case ShareVisibilityPrivate, ShareVisibilityPublic:
		return true
	}
	return false
}

func (e ShareVisibility) String() string {
	return string(e)
}

func (e *ShareVisibility) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShareVisibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShareVisibility", str)
	}
	return nil
}

func (e ShareVisibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
